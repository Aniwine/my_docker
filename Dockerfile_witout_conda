FROM nvidia/cuda:11.2.2-cudnn8-runtime-ubuntu20.04
LABEL maintainer="luocheng@chinaedu.net"

#设置环境变量
ENV LANG C.UTF-8
ENV PATH $PATH:/usr/local/bin

#更改apt源
RUN echo "\
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse"\
>> /etc/apt/sources.list


# 创建用户组
RUN groupadd -g 1002 ai

#创建普通用户，并分配sudo权限
ARG user=ai
ARG passwd=123
ARG userhome=/home/${user}

#指定和宿主机上ai用户同样的uid（名字可不同）
RUN adduser --disabled-password --gecos "" -uid 1002 -gid 1002 ${user} && \
    usermod -aG sudo ${user} && \
    mkdir -p /etc/sudoers.d/ && \
    echo "%sudo  ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/nopasswd && \
    echo root:${passwd} | chpasswd && \
    echo ${user}:${passwd} | chpasswd && \
    touch ${userhome}/.sudo_as_admin_successful

#添加公钥
RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub

#安装基础环境,并开启ssh
RUN 	chmod 777 /tmp \
	&& apt-get clean \
	&& apt-get update \
	&& DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata \
	&& apt-get install openssl libssl-dev -y \
	&& apt-get install -y gcc cmake make cron rsyslog apt-utils build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev \
    	&& apt-get install -y vim zip unzip psmisc openssh-server \
    	&& apt-get clean \
    	&& apt-get autoclean \
	&& /etc/init.d/ssh start 

# 开启所有用户的ssh登录许可
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config && \
echo 'sshd:ALL' >> /etc/hosts.aldlow 
 
#安装python3.10.12
RUN	cd /home \
	&& wget 	https://www.python.org/ftp/python/3.10.12/Python-3.10.12.tgz \
	&& tar -xzf Python-3.10.12.tgz \
	&& cd Python-3.10.12 \
	&&  ./configure --enable-optimizations --prefix=/usr/local/bin/python3.10 --enable-shared --with-ssl \
	&& make -j 8 \
	&& make install \
	&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/bin/python3.10/bin

#配置python3.10.12为默认python3解释器，并添加到环境变量
RUN	cp /usr/local/bin/python3.10/lib/libpython3.10.so.1.0 /usr/lib/ \
	&& ln -s -f /usr/local/bin/python3.10/bin/python3.10 /usr/bin/python3 \
        	&& ln -s -f /usr/local/bin/python3.10/bin/python3.10 /usr/bin/python \
        	&& ln -s -f /usr/local/bin/python3.10/bin/pip3 /usr/bin/pip3 \
        	&& ln -s -f /usr/local/bin/python3.10/bin/pip3 /usr/bin/pip \
	&& export PATH=$PATH:/usr/local/python3/bin \
	&& pip3 install pip -U -i https://mirrors.aliyun.com/pypi/simple/ --timeout=1000000 \
	&& apt-get clean \
       	&& apt-get autoclean

#更改pip源
RUN mkdir ~/.pip && cd ~/.pip && \
echo "\
[global]\n \
index-url = https://pypi.tuna.tsinghua.edu.cn/simple/\n \
\n \
[install]\n \ 
https://pypi.tuna.tsinghua.edu.cn\n" \
> ~/.pip/pip.conf

# 配置普通用户环境变量
RUN echo export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin >> ${userhome}/.bashrc &&  /bin/bash -c 'source ${userhome}/.bashrc'

#安装pytorch，由于没有11.2，选择向下兼容的10.2
#RUN	python -m pip install --upgrade pip
RUN	pip install torch==1.12.0+cu102 torchvision==0.13.0+cu102 torchaudio==0.12.0 --extra-index-url https://download.pytorch.org/whl/cu102

#安装mmcv，mmengine，mmdet
WORKDIR /project
COPY	pycocotools.tar.gz /project 
RUN	cd /project \
	&& tar -xzf pycocotools.tar.gz \
	&& cd pycocotools-2.0.6 \
	&& pip install -e . \
	&& rm -f /project/pycocotools.tar.gz

RUN	pip install -U openmim \
	&& export PATH=$PATH:/usr/local/bin/python3.10/bin \
	&& mim install "mmengine>=0.6.0" \
	&& mim install "mmcv>=2.0.0rc4,<2.1.0" \
	&& mim install "mmdet>=3.0.0rc6,<3.1.0"
#添加环境变量
#RUN	export PYTHONPATH=$PYTHONPATH:/usr/local/bin/python3.10/lib/python3.10/site-packages

#安装mmyolo及项目代码
#mmyolo采用离线安装方式，通过文件映射的方式传递到docker容器内。

#编译说明
#构建镜像,其中.表示Dockerfile所在目录，包含了所需拷贝至docker的文件
#docker build -t edu_photo:cuda_py3.10 .
#创建容器
#docker run -itd --gpus all --shm-size=8g -u ai --name photodevelop -p 12080:8080 -p 12081:8081 -p 12082:8082 -p 12083:8083 -p 12084:8084  -p 12085:8085 -p 12086:8086 -p 13022:22  -v /sda2/data/development/project/luocheng/data/test:/project/ -v  /usr/local/cuda-11.2/targets/x86_64-linux/lib:/usr/local/cuda-11.2/lib64 edu_photo:cuda_py3.10 /bin/bash 
